기존에 클라이언트는 서버가 html 파일을 직접 받는 방법.
이후에 애플릿 코드가 클라이언트에게 전달되어 클라이언트에서 실행되는 방법 사용.
그러나 당시에는 컴들이 안좋았기에, 너무 느렸음. 애플릿기술은 지금 거의 사장되었음.

애플릿을 대체하여 지금은 서블릿이라는 기술이 대체되었다.
자바 플랫폼에서 컴포넌트 기반의 웹 앱개발 기술!
JSP는 서블릿 기술에 기반한다.
자바 언어를 이용해 다이나믹한 웹 사이트를 개발하기 위해 등장한 기술이다.
웹서버 기능을 확장시키는 방법 제공

HTML의 경우에는 정적인 특성. 한 번 작성되면 쭉 동일한것...
하지만 동적인 특성을 가지려면 CGI, applet, servlet 등의 기술을 써야한다.


서블릿의 문제점!
프로그램에서 HTML을 다룬다.
컨텐츠와 비즈니스 로직 분리가 안된다.. 순수한 자바 코드가 서버측에 올라가야하기에..
사용자가 원하는 일부 부분만 수정하더라도 자바 코드 전체를 다시 컴파일 해줘야하는 일이..

그래서 JSP가 등장!
HTML에서 프로그램을 다룬다.
JSP는 우리가 컴파일 할 필요는 없다. 스크립팅 기술.

그러나 한계!
구현 방법. 디자인 패턴에서의... 컨텐츠와 비즈니스 로직이 분리되지 않아서.
컨텐츠 관리는 쉽지만, 프로그램 관리는 복잡해졌다.

그러면서 MVC 패턴 주목받기 시작!
모델, 뷰, 컨트롤러. JSP+MVC 가 보편적으로 사용되고 있단다.


서블릿 컨테이너 (WAS - web application server)
자바 가상머신을 내장한 서블릿 운영환경
JSP는 서블릿으로 변환되어 실행
대부분 별도의 실행환경 없이 서블릿 컨테이너에 통합된다.
자체 웹서버 기능도 있으나, 웹서버와 분리하기도 한다.
(Webserver와  WAS Server...)
대표적으로 아파치(Webserver) 톰캣(WAS server)이 있다.


서블릿 동작 원리
클라이언트의 요청
서버상에 자바 클래스 파일이 존재한다. 그런 형태의 서블릿을 서블릿 컨테이너에 등록해놓는다.
스레드 서블릿은 cgi와 같은 기법등에서 프로세스를 매번 생성하는 것 보다 효율적이다.
프로세스 생성보다는 스레드를 생성하는 것이 더 나으니까.

대부분의 사용자 요청을 처리하기 위해선 데이터베이스와 연결되어 동작한다.
그리고 최종적으로 클라이언트에게 응답을 해주는데, HTML 형식 등으로 반환할 수 있다.
그 안에 정적인 부분과 동적인 부분이 함께 들어가는 것!


서블릿 장점!
쓰레드를 기반으로 하므로 웹 애플리케이션 운영에 효율적이다!
자바를 기반으로 하므로 자바 API를 대부분 사용할 수 있다.
운영체제나 하드웨어에 영향을 받지 않는다.
한 번 개발된 애플리케이션은 다양한 서버 환경에서도 실행이 가능하다.
즉, WAS 서버만 돌아가면 그 웹 사이트는 돌아간다! 라는 것이야
웹 어플리케이션에서 효율적인 자료 공유를 제공한다.


JSP 파일 위치
JSP 파일의 모든 내용은 jspService() 메소드에 위치한다. ★

public void jspService(HttpServletRequest request, HttpServletResponse response_
    throws java.io.IOException, ServletException {
    ...
    ...
    out.write("\r\n\r\n");
    out.write("<HTML>\r\n");
    out.write("<HEAD>");
    out.write("<TITLE>Hello World");
    out.write("</TITLE>");
    out.write("</HEAD>\r\n\r\n");
    out.write("<BODY>");
    out.write("<H2>Hello Wolrd : 헬로월드");
    out.write("</H2>\r\n오늘의 날짜와 시간은 : ");
    out.print(new java.util.Date());
    ...
}


JSP는
servlet 스펙에 기반하여 동적 web page를 생성하기 위한 스펙
Server측 processiong. 서버측 언어!
표현과 동적 컨텐츠를 분리한다.
<%@page import = "java.util.Date"%>
<html>
<body>
<h1>example</h1>
current time is <% = new Date()%>
</body>
</html>


특징!!
보여주는 부분과 프로그램 로직 부분을 분리하여 제작할 수 있다.
보여주는 부분 : HTML, XML
프로그램 로직 : JSP 태그
컴포넌트의 재사용
기존에 EJB로 만들어진 컴포넌트가 있다면 JSP에서 그대로 사용가능
자바의 특징 계승
JSP는 자바 기반 스크립트. 따라서 JSP 페이지는 자바 기술의 모든 장점을 수용한다.
객체지향 프로그래밍, 플랫폼 독림성, JDBC의 사용 등
페이지 작성이 쉽다.
JSP파일은 서버에 올라갈 때가 아니라 사용자로부터 호출이 될 때 컴파일이 된다.
따라서 매번 다시 컴파일 해야하는 번거로움이 없다. 와스가 알아서 한다.


JSP 실행과정
사용자가 특정 JSP 페이지 요청
JSP 엔진은 요청 페이지가 새로 작성되거나 변경되었는지, 아니면 변화되지 않았는지 판단
새로 요청(변경) 된 경우, JSP 파일을 이용해 서블릿 코드를 만든 후 이걸 컴파일 해서 서블릿을 실행
재요청은 그전에 만들었던 서블릿을 그대로 실행!


JSP의 장점
여러가지 일을 쉽게할 수 있게 도와준다.
HTML 작성, HTML을 읽어들이고 유지관리
표준 HTML 툴을 사용해서 코딩 가능
Java code(logic)와 HTML code(표현)을 분리 시킬 수 있다.


다른 기술들... PHP, ASP에 대한 JSP의 특징
유사점은 모두 서버측 언어이다 라는 것. JSP는 ASP에 대한 Java 진영의 구현이다.
차이점은, ASP는 MS에서 개발한 C# 등.. 플밍 언어임. 마소 플랫폼에서 동작한다.
ASP는 캐시 되기도 하지만, 대부분 항상 인터프리팅 되어 실행된다.
JSP는 자바 기술이고, 플랫폼 독립적이며, 최초가 아닌 이후에는 컴파일된 코드로 사용자에게 제공하므로 속도가 빠르다.


JSP와 자바스크립트(in browser)
JSP는 서버측 언어, 자바스크립트는 주로 사용자의 웹 브라우저에서 실행되는 클라이언트 언어이다.
자바스크립트는 인터프리팅 방식, 포터블 하지 않다. 동적인 기능을 제공하기 위해 나온 코드.


Servlet : HTML in Java Code - 결국 자바코드.
JSP : Java Code Scriptlets in HTML - 자바가 스크립트 형태로 포함


<% %> 형태로 하는 것이 JSP 문법이다!
따라서 작성한 자바 코드 형태가 서블릿 형태로 바뀌는 것.
JSP는 코드를 컴파일 할 필요가 없다. 자동 컴파일.
JSP page를 위해 별도의 특별한 디렉토리를 만들 필요 없다.
페이지 호출을 위해 특별한 URL을 사용할 필요 없다.
JSP 페이지에 사용되는 일반적 자바 클래스에 대해서는 클래스 패스, 인스톨 디렉토리 등에 관한 규칙이 여전히 적용되어야 한다.


<% %> 형태가 JSP 문법.
<%= : 이퀄 사인이 나오면, 코드 실행 결과값을 웹 브라우저 상에 표시하고자 하는 경우!!
버튼이 눌렸을 때 JSP 파일을 호출할 수 있다.


전적으로 JSP는 server에서 실행된다. 따라서 클라이언트가 다루는 내용을 변경하지는 못한다.
페이지 변환 시간에 JSP construct는 서블릿 코드로 변환된다.
Request time에 서블릿 코드가 실행된다. 이 요청 시간에 JSP 해석은 발생하지 않는다.
Original JSP 페이지는 request time에는 아무 일도 하지 않는다. 오직 서블릿 코드가 사용.
첫 번째 요청이 들어온 경우에만 JSP 파일을 서블릿 코드로 변환하는 작업이 수행된다.
